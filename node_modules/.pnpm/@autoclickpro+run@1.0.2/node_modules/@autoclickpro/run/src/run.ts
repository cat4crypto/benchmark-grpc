import minimist from "minimist";
import * as _ from "lodash-es";

export type CmdFn = (
  this: any,
  option: Record<string, any>,
  globalObject: any
) => Promise<any> | any;

export type SubcmdObject = {
  [subcmd: string]: CmdFn | SubcmdObject;
};

function createProxy(object: Object) {
  return new Proxy(object, {
    apply(target: (...args: any[]) => any, thisArg, argArray) {
      return Reflect.apply(target, thisArg, argArray);
    },
    get(target, prop: string, receiver) {
      if (prop in target) {
        return Reflect.get(target, prop, receiver);
      }
      if ("default" in target) {
        return Reflect.get(target, "default", receiver);
      }
      throw new Error(`no such command: ${prop}`);
    },
  });
}

export async function run(
  subcmdObject: SubcmdObject,
  ministOpts?: minimist.Opts
) {
  const proxySubcmdObject = createProxy(subcmdObject) as SubcmdObject;
  const argsObject = minimist(process.argv.slice(2), ministOpts);

  if (argsObject.help) {
    console.log(proxySubcmdObject);
    return;
  }
  if (argsObject.edit) {
    const sourceFile = process.argv[1];
    console.log(sourceFile);
    return;
  }
  if (argsObject.debug) {
    console.log("process.argv:", process.argv);
    console.log("argv of minist:", argsObject);
  }

  const subCmds: string[] | undefined = argsObject._;
  if (!subCmds) {
    throw new Error(
      `please specify a valid subcommand. and handler current is ${subCmds}`
    );
  }
  if (subCmds.length === 0) {
    console.log("please specify a valid subcommand.");
    return;
  }
  try {
    let curProxyCmdObject = proxySubcmdObject;
    for (const cmd of subCmds) {
      const cmdObjectOrFn = curProxyCmdObject[cmd];
      if (_.isFunction(cmdObjectOrFn)) {
        //@ts-ignore
        await cmdObjectOrFn.call(
          curProxyCmdObject,
          argsObject,
          proxySubcmdObject
        );
        return;
      }
      if (_.isObject(cmdObjectOrFn)) {
        curProxyCmdObject = cmdObjectOrFn as SubcmdObject;
        continue;
      }
      throw new Error(`no such command: ${cmd} of ${subCmds.join("=>")}`);
    }
  } catch (e) {
    console.log("\n====argv of minist:====\n", argsObject);
    console.log(`file: ${process.argv[1]}`);
    console.error(e);
  }
}
